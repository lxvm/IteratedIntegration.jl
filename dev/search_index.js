var documenterSearchIndex = {"docs":
[{"location":"methods/#Reference","page":"Manual","title":"Reference","text":"","category":"section"},{"location":"methods/","page":"Manual","title":"Manual","text":"Modules = [IteratedIntegration]\nOrder   = [:type, :function]","category":"page"},{"location":"methods/#IteratedIntegration.AbstractIntegrator","page":"Manual","title":"IteratedIntegration.AbstractIntegrator","text":"AbstractIntegrator{F} <: Function\n\nSupertype of integration routines of a (collection of) function F.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.AbstractIteratedIntegrand","page":"Manual","title":"IteratedIntegration.AbstractIteratedIntegrand","text":"AbstractIteratedIntegrand{d}\n\nSupertype for integrands compatible with iterated integration of d variables.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.AbstractLimits","page":"Manual","title":"IteratedIntegration.AbstractLimits","text":"AbstractLimits{d,T<:AbstractFloat}\n\nRepresents a set of integration limits over d variables of type T. Realizations of this type should implement lower and upper, which return the lower and upper limits of integration along some dimension, rescale which represents the number of symmetries of the BZ which are used by the realization to reduce the BZ (the integrand over the limits gets multiplied by this factor), and a functor that accepts a single numeric argument and returns another realization of that type (in order to do nested integration). Thus the realization is also in control of the order of variables of integration and must coordinate this behavior with their integrand. Instances should also be static structs.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.AssociativeOpIntegrand","page":"Manual","title":"IteratedIntegration.AssociativeOpIntegrand","text":"AssociativeOpIntegrand(op, I::AbstractIteratedIntegrand...)\n\nConstructor for a collection of integrands reduced by an associative op.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.CubicLimits","page":"Manual","title":"IteratedIntegration.CubicLimits","text":"CubicLimits(a, b)\n\nStore integration limit information for a hypercube with vertices a and b. which can be can be real numbers, tuples, or AbstractVectors. The outermost variable of integration corresponds to the last entry.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.IteratedIntegrand","page":"Manual","title":"IteratedIntegration.IteratedIntegrand","text":"IteratedIntegrand(fs...; f0=identity)\n\nwarning: Experimental\nThis may not work or may change\n\nRepresents a nested integral of the form f0(∫dxN fN(xN, ... ∫dx2 f2(x2, ..., xN, ∫dx1 f1(x1, ..., xN)) ... ))) so the functions need to know the arguments and their layout, since the variables and inner integrals are passed as vectors.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.IteratedIntegrator","page":"Manual","title":"IteratedIntegration.IteratedIntegrator","text":"IteratedIntegrator(f, l, p...; ps=(), routine=iterated_integration, args=(), kwargs=(;))\n\nwarning: Experimental\nIntended to integrate all kinds of AbstractIteratedIntegrand\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.PolyhedralLimits","page":"Manual","title":"IteratedIntegration.PolyhedralLimits","text":"PolyhedralLimits(::Polyhedron)\n\nIntegration endpoints from a convex hull.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.ProductLimits","page":"Manual","title":"IteratedIntegration.ProductLimits","text":"ProductLimits(lims::AbstractLimits...)\n\nConstruct a collection of limits which yields the first limit followed by the second, and so on. The inner limits are not allowed to depend on the outer ones. The outermost variable of integration should be placed first, i.e. int_Omega int_Gamma should be ProductLimits(Ω, Γ).\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.TetrahedralLimits","page":"Manual","title":"IteratedIntegration.TetrahedralLimits","text":"TetrahedralLimits(a::NTuple{d}) where d\n\nA parametrization of the integration limits for a tetrahedron whose vertices are\n\n( 0.0,  0.0, ...,  0.0)\n( 0.0,  0.0, ..., a[d])\n…\n( 0.0, a[2], ..., a[d])\n(a[1], a[2], ..., a[d])\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.ThunkIntegrand","page":"Manual","title":"IteratedIntegration.ThunkIntegrand","text":"ThunkIntegrand{d}(f)\n\nStore f to evaluate f(x) at a later time. Employed by iterated_integration for generic integrands that haven't been specialized to use iterated_pre_eval. Note that x isa SVector, so the function arguments needs to expect the behavior. d is a parameter specifying the number of variables in the vector input of f. This is good for integrands like ∫∫∫f.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IteratedIntegration.TranslatedLimits","page":"Manual","title":"IteratedIntegration.TranslatedLimits","text":"TranslatedLimits(lims::AbstractLimits{d}, t::NTuple{d}) where d\n\nReturns the limits of lims translated by offsets in t.\n\n\n\n\n\n","category":"type"},{"location":"methods/#IntervalSets.endpoints-Union{Tuple{AbstractLimits{d, T} where T<:AbstractFloat}, Tuple{d}} where d","page":"Manual","title":"IntervalSets.endpoints","text":"endpoints(::AbstractLimits{d}, [dim=d]) where d\n\nReturn a tuple with the lower and upper limit of the dimth variable of integration, which is the outermost by default. This is equivalent to projecting the integration domain onto one dimension.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.alloc_segbufs-NTuple{4, Any}","page":"Manual","title":"IteratedIntegration.alloc_segbufs","text":"alloc_segbufs(coefficient_type, typesof_fx, typesof_nfx, ndim)\nalloc_segbufs(f, l::AbstractLimits)\n\nThis helper function will allocate enough segment buffers as are needed for an iterated_integration call of integrand f and integration limits l. coefficient_type should be coefficient_type(l), typesof_fx should be the return type of the integrand f for each iteration of integration, typesof_nfx should be the types of the norms of a value of f for each iteration of integration, and ndim should be ndims(l).\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_inference-Union{Tuple{T}, Tuple{d}, Tuple{Any, AbstractLimits{d, T}}} where {d, T}","page":"Manual","title":"IteratedIntegration.iterated_inference","text":"iterated_inference(f, l::AbstractLimits{d})\n\nReturns a tuple of the return types of f after each variable of integration\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_integral_type-Union{Tuple{d}, Tuple{Any, AbstractLimits{d, T} where T<:AbstractFloat}} where d","page":"Manual","title":"IteratedIntegration.iterated_integral_type","text":"iterated_integral_type(f, l)\n\nReturns the output type of an iterated integral of f over domain l\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_integrand-Union{Tuple{d}, Tuple{AbstractIteratedIntegrand, Any, Val{d}}} where d","page":"Manual","title":"IteratedIntegration.iterated_integrand","text":"iterated_integrand(f::AbstractIteratedIntegrand, y, ::Type{Val{d}}) where d\niterated_integrand(f::AbstractIteratedIntegrand, y, dim::Int) # fallback\n\nBy default, returns y which is the result of an interior integral. Can use dispatch on f to implement more kinds of iterated integrals, in which case the developer should know d takes values of 0, 1, ..., ndims(lims). d=1 evaluates the innermost integral, d=0 evaluates a function outside the last integral. Subtypes of AbstractFourierIntegrand \n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_integration-Tuple{Any, Any, Any}","page":"Manual","title":"IteratedIntegration.iterated_integration","text":"iterated_integration(f, ::AbstractLimits; order=7, atol=nothing, rtol=nothing, norm=norm, maxevals=typemax(Int), initdivs=ntuple(i -> Val(1), Val{d}()), segbufs=nothing)\niterated_integration(f, a, b; kwargs...)\n\nCalls QuadGK to perform iterated 1D integration of f over a compact domain parametrized by AbstractLimits. In the case two points a and b are passed, the integration region becomes the hypercube with those extremal vertices. f is assumed to be type-stable.\n\nReturns a tuple (I, E) of the estimated integral and estimated error.\n\nKeyword options include a relative error tolerance rtol (if atol==0, defaults to sqrt(eps) in the precision of the norm of the return type), an absolute error tolerance atol (defaults to 0), a maximum number of function evaluations maxevals for each nested integral (defaults to 10^7), and the order of the integration rule (defaults to 7).\n\nThe algorithm is an adaptive Gauss-Kronrod integration technique: the integral in each interval is estimated using a Kronrod rule (2*order+1 points) and the error is estimated using an embedded Gauss rule (order points). The interval with the largest error is then subdivided into two intervals and the process is repeated until the desired error tolerance is achieved. This 1D procedure is applied recursively to each variable of integration in an order determined by l to obtain the multi-dimensional integral.\n\nUnlike quadgk, this routine does not allow infinite limits of integration nor unions of intervals to avoid singular points of the integrand. However, the initdivs keyword allows passing a tuple of integers which specifies the initial number of panels in each quadgk call at each level of integration.\n\nIn normal usage, iterated_integration will allocate segment buffers. You can instead pass a preallocated buffer allocated using alloc_segbufs as the segbuf argument. This buffer can be used across multiple calls to avoid repeated allocation.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_pre_eval-Tuple{AbstractIteratedIntegrand, Any, Any}","page":"Manual","title":"IteratedIntegration.iterated_pre_eval","text":"iterated_pre_eval(f, x, dim)\niterated_pre_eval(f, x) # fallback\n\nPerform a precomputation on f using the value of a variable of integration, x. The default is to store x and delay the computation of f(x) until all of the values of the variables of integration are determined at a integration point. Certain types of functions, such as Fourier series, take can use x to precompute a new integrand for the remaining variables of integration that is more computationally efficient. This function must return the integrand for the subsequent integral.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_segs-Union{Tuple{initdivs}, Tuple{Any, AbstractLimits, Val{initdivs}}} where initdivs","page":"Manual","title":"IteratedIntegration.iterated_segs","text":"iterated_segs(f, l::AbstractLimits, ::Val{initdivs}) where initdivs\n\nReturns a Tuple of integration nodes that are passed to QuadGK to initialize the segments for adaptive integration. By default, returns initdivs equally spaced panels on endpoints(l). If f is localized, specializing this function can also help avoid errors when QuadGK fails to adapt.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_tol_update-NTuple{5, Any}","page":"Manual","title":"IteratedIntegration.iterated_tol_update","text":"iterated_tol_update(f, l, atol, rtol)\n\nChoose a new set of error tolerances for the next inner integral. By default returns (atol, rtol) unchanged.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.iterated_value-Tuple{AbstractIteratedIntegrand, Val{1}}","page":"Manual","title":"IteratedIntegration.iterated_value","text":"iterated_value(f, Val{d}) where d\n\nWhen d=1, calls iterated_value(f) to yield a pre-evaluated item from f to pass to an inner integral. This should be specialized for f\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.quad_args-Union{Tuple{T}, Tuple{typeof(QuadGK.quadgk), Any, Vararg{T, N} where N}} where T","page":"Manual","title":"IteratedIntegration.quad_args","text":"quad_args(routine, f, lims, [...])\n\nReturn the tuple of arguments needed by the quadrature routine other than the test integrand  f, depending on the test integrand f and lims.\n\n\n\n\n\n","category":"method"},{"location":"methods/#IteratedIntegration.quad_kwargs-Tuple{typeof(QuadGK.quadgk), Any, Any}","page":"Manual","title":"IteratedIntegration.quad_kwargs","text":"quad_kwargs(routine, f, lims, kwargs::NamedTuple)\n\nSupplies the default keyword arguments to the given integration routine without over-writing those already provided in kwargs\n\n\n\n\n\n","category":"method"},{"location":"methods/#Polyhedra.coefficient_type-Tuple{Any}","page":"Manual","title":"Polyhedra.coefficient_type","text":"coefficient_type(x::AbstractLimits)\n\nReturns the type of the coordinate coefficients for the domain\n\n\n\n\n\n","category":"method"},{"location":"methods/#Polyhedra.fixandeliminate","page":"Manual","title":"Polyhedra.fixandeliminate","text":"fixandeliminate(l::AbstractLimits, x)\n\nFix the outermost variable of integration and return the inner limits.\n\nnote: For developers\nRealizations of type T<:AbstractLimits only have to implement a method with signature fixandeliminate(::T, ::Number). The result must also have dimension one less than the input, and this should only be called when ndims= 1\n\n\n\n\n\n","category":"function"},{"location":"#IteratedIntegration.jl","page":"Home","title":"IteratedIntegration.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IteratedIntegration","category":"page"},{"location":"#IteratedIntegration","page":"Home","title":"IteratedIntegration","text":"A package for iterated adaptive integration (IAI) based on QuadGK.jl.\n\n\n\n\n\n","category":"module"}]
}
